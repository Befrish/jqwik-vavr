# This is a workflow that is manually triggered

name: release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version'
        required: true
      development-version:
        description: 'Development version (without SNAPSHOT)'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set release version with Maven
      run: mvn -B -V mvn org.codehaus.mojo:versions-maven-plugin:2.5:set -DnewVersion=${{ github.event.inputs.release-version }} org.codehaus.mojo:versions-maven-plugin:2.5:commit

    - name: Build with Maven
      run: mvn -B -V package --file pom.xml -DskipTests -DskipITs


    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.event.inputs.release-version }}
        release_name: Release ${{ github.event.inputs.release-version }}

    - name: Upload Release Asset JAR
      id: upload-release-asset-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/jqwik-vavr-${{ github.event.inputs.release-version }}.jar
        asset_name: jqwik-vavr-${{ github.event.inputs.release-version }}.jar
        asset_content_type: application/java-archive

    - name: Upload Release Asset Sources JAR
      id: upload-release-asset-sources-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/jqwik-vavr-${{ github.event.inputs.release-version }}-sources.jar
        asset_name: jqwik-vavr-${{ github.event.inputs.release-version }}-sources.jar
        asset_content_type: application/java-archive

    # Publish: see https://github.com/actions/setup-java#publishing-using-apache-maven
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -Pdeploy-github
      env:
        GITHUB_TOKEN: ${{ github.token }}
        
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: 1.8
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        server-id: repsy # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: REPSY_USERNAME # env variable for username in deploy
        server-password: REPSY_PASSWORD # env variable for password in deploy

    - name: Publish to Maven Repository on Repsy
      run: mvn deploy -Pdeploy-repsy
      env:
        REPSY_USERNAME: ${{ secrets.REPSY_USERNAME }}
        REPSY_PASSWORD: ${{ secrets.REPSY_PASSWORD }}


    - name: Set development version with Maven
      run: mvn -B -V mvn org.codehaus.mojo:versions-maven-plugin:2.5:set -DnewVersion=${{ github.event.inputs.development-version }} org.codehaus.mojo:versions-maven-plugin:2.5:commit
    
    - name: Push update of development version
      uses: actions-x/commit@v2
      with:
        name: github-actions
        email: github-actions[bot]@users.noreply.github.com
